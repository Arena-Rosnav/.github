{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the arena-rosnav wiki! Introduction Arena-rosnav is a flexible, high-performance 2D simulator with configurable agents, multiple sensors, and benchmark scenarios for testing robotic navigation. Arena-Rosnav uses Flatland as the core simulator and is a modular high-level library for end-to-end experiments in embodied AI -- defining embodied AI tasks (e.g. navigation, obstacle avoidance, behavior cloning), training agents (via imitation or reinforcement learning, or no learning at all using conventional approaches like DWA, TEB or MPC), and benchmarking their performance on the defined tasks using standard metrics. What is arena-rosnav for? Train DRL agents on ROS compatible simulations for autonomous navigation in highly dynamic environments. Flatland-DRL integration is inspired by Ronja Gueldenring's work: drl_local_planner_ros_stable_baselines . Test state of the art local and global planners in ROS environments both in simulation and on real hardware. Following features are included: Setup to train a local planner with reinforcement learning approaches from stable baselines3 Training in simulator Flatland in train mode Include realistic behavior patterns and semantic states of obstacles (speaking, running, etc.) Include different obstacles classes (other robots, vehicles, types of persons, etc.) Implementation of intermediate planner classes to combine local DRL planner with global map-based planning of ROS Navigation stack Testing a variety of planners (learning based and model based) within specific scenarios in test mode Modular structure for extension of new functionalities and approaches","title":"Home"},{"location":"#welcome-to-the-arena-rosnav-wiki","text":"","title":"Welcome to the arena-rosnav wiki!"},{"location":"#introduction","text":"Arena-rosnav is a flexible, high-performance 2D simulator with configurable agents, multiple sensors, and benchmark scenarios for testing robotic navigation. Arena-Rosnav uses Flatland as the core simulator and is a modular high-level library for end-to-end experiments in embodied AI -- defining embodied AI tasks (e.g. navigation, obstacle avoidance, behavior cloning), training agents (via imitation or reinforcement learning, or no learning at all using conventional approaches like DWA, TEB or MPC), and benchmarking their performance on the defined tasks using standard metrics.","title":"Introduction"},{"location":"#what-is-arena-rosnav-for","text":"Train DRL agents on ROS compatible simulations for autonomous navigation in highly dynamic environments. Flatland-DRL integration is inspired by Ronja Gueldenring's work: drl_local_planner_ros_stable_baselines . Test state of the art local and global planners in ROS environments both in simulation and on real hardware. Following features are included: Setup to train a local planner with reinforcement learning approaches from stable baselines3 Training in simulator Flatland in train mode Include realistic behavior patterns and semantic states of obstacles (speaking, running, etc.) Include different obstacles classes (other robots, vehicles, types of persons, etc.) Implementation of intermediate planner classes to combine local DRL planner with global map-based planning of ROS Navigation stack Testing a variety of planners (learning based and model based) within specific scenarios in test mode Modular structure for extension of new functionalities and approaches","title":"What is arena-rosnav for?"},{"location":"get_started/","text":"Get Started Simulation Training Evaluation TODO","title":"Get Started"},{"location":"get_started/#get-started","text":"Simulation Training Evaluation TODO","title":"Get Started"},{"location":"installation/","text":"Installation Requirements Arena-rosnav is currently developed in and for Ubuntu 20.04. Git sudo apt update && sudo apt install -y git ROS - Robot Operating System 1. Configure your Ubuntu repositories sudo add-apt-repository universe sudo add-apt-repository multiverse sudo add-apt-repository restricted sudo apt update 2. Set up your scources.list sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' 3. Set up your keys sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 4. Installation sudo apt update && sudo apt install -y ros-noetic-desktop-full 5. Environment Setup echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc # for bash source ~/.bashrc echo \"source /opt/ros/noetic/setup.zsh\" >> ~/.zshrc # for zsh source ~/.zshrc 6. Dependencies for building packages sudo apt install -y python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential 7. Initialize rosdep sudo rosdep init rosdep update 8. Install additional packages sudo apt update && sudo apt install -y \\ libopencv-dev \\ liblua5.2-dev \\ screen \\ python3-rosdep \\ python3-rosinstall \\ python3-rosinstall-generator \\ build-essential \\ python3-rospkg-modules \\ ros-noetic-navigation \\ ros-noetic-teb-local-planner \\ ros-noetic-mpc-local-planner \\ libarmadillo-dev \\ ros-noetic-nlopt \\ ros-noetic-turtlebot3-description \\ ros-noetic-turtlebot3-navigation \\ ros-noetic-lms1xx \\ ros-noetic-velodyne-description Python Poetry curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - source $HOME/.poetry/env Recommendations (Optional) oh-my-zsh We recommend using oh-my-zsh. You can set up oh-my-zsh with the following steps. 1. Install zsh sudo apt install zsh 2. Install curl sudo apt install curl 3. Install oh-my-zsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" 4. Set up autosuggestions git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Open your .zshrc with editor nano ~/.zshrc Scroll down to plugins Insert zsh-autosuggestions into plugins=() . Your plugins might look like this: plugins=(git zsh-autosuggestions) Save with Ctrl+S Exit with Crtl+X Source your .zshrc source $HOME/.zshrc 5. Install Powerlevel10k Theme (optional) git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k In your zshrc, search for ZSH_THEME, set ZSH_THEME=\"powerlevel10k/powerlevel10k\", and follow install wizard. Visual Studio Code We recommend using VSC as your programming environment. You can download VSC from the official site . For Windows Users WSL2 (Windows-Subsystem for Linux) Please follow the steps in this WSL installation guide for Windows 10 to install WSL2 on your computer. Note You might encounter this problem during installation: Installing, this may take a few minutes... WslRegisterDistribution failed with error: 0x80370102 Error: 0x80370102 The virtual machine could not be started because a required feature is not installed. This problem can be resolved by enabling CPU virtualization in your BIOS. How you can achieve this depends on your hardware. This guide from bleepingcomputer might help you with that. Windows-X-Server To use WSL with graphical programs, an X-server will need to be installed on the Windows 10 system and the DISPLAY variable will need to be set in Bash/Zsh. One possible program to use is VcXsrv . 1. Set up DISPLAY variable After installing the X-server you need to set the DISPLAY variable in your bash/zsh. Use nano ~/.bashrc or nano ~/.zshrc and insert the following code on the bottom of the file. export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0 Save with Ctrl+S and exit via Ctrl+X. 2. Xlaunch Settings Start Xlaunch and configure it the following way. In the end the configuration can be saved. 3. Display Settings Choose Option: Multiple Windows Set Display Number to 0 4. Client Settings Choose Option: Start no Client 5. Extra Settings Choose Option: Disable access control Note If you encounter problems, you might go to Windows Defender Firewall -> Communication between Applications and Windows Firewall. Look for VcXsrv and change the settings to both private and public checked. Another problem might occur because of inbound rules from Windows Defender Firewall. Go to Windows Defender Firewall -> Advanced Settings -> Inbound -> Delete every rule for VcXsrv. Visual Studio Code plus WSL Extension We recommend you use Visual Studio Code as your programming environment. Please follow the instructions in this VS Code with WSL tutorial . Installation Note Make sure your machine fulfills all the mandatory requirements listed above. 1. Create catkin workspace mkdir -p catkin_ws/src # name of the workspace can be arbitrary cd catkin_ws/src 2. Clone arena-rosnav repository git clone https://github.com/Arena-Rosnav/arena-rosnav cd arena-rosnav 3. Update the ROS workspace rosws update 4. Install python packages with poetry poetry shell && poetry install 5. Install stable-baselines3 cd ../forks/stable-baselines3 && pip install -e . 6. Build your workspace cd ../../.. && catkin_make Note If packages are missing during the build process, simply add them with poetry add <package_name> . Finished! Check out the Quickstart Guides to start using arena-rosnav.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Arena-rosnav is currently developed in and for Ubuntu 20.04.","title":"Requirements"},{"location":"installation/#git","text":"sudo apt update && sudo apt install -y git","title":"Git"},{"location":"installation/#ros-robot-operating-system","text":"","title":"ROS - Robot Operating System"},{"location":"installation/#1-configure-your-ubuntu-repositories","text":"sudo add-apt-repository universe sudo add-apt-repository multiverse sudo add-apt-repository restricted sudo apt update","title":"1. Configure your Ubuntu repositories"},{"location":"installation/#2-set-up-your-scourceslist","text":"sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'","title":"2. Set up your scources.list"},{"location":"installation/#3-set-up-your-keys","text":"sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654","title":"3. Set up your keys"},{"location":"installation/#4-installation","text":"sudo apt update && sudo apt install -y ros-noetic-desktop-full","title":"4. Installation"},{"location":"installation/#5-environment-setup","text":"echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc # for bash source ~/.bashrc echo \"source /opt/ros/noetic/setup.zsh\" >> ~/.zshrc # for zsh source ~/.zshrc","title":"5. Environment Setup"},{"location":"installation/#6-dependencies-for-building-packages","text":"sudo apt install -y python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential","title":"6. Dependencies for building packages"},{"location":"installation/#7-initialize-rosdep","text":"sudo rosdep init rosdep update","title":"7. Initialize rosdep"},{"location":"installation/#8-install-additional-packages","text":"sudo apt update && sudo apt install -y \\ libopencv-dev \\ liblua5.2-dev \\ screen \\ python3-rosdep \\ python3-rosinstall \\ python3-rosinstall-generator \\ build-essential \\ python3-rospkg-modules \\ ros-noetic-navigation \\ ros-noetic-teb-local-planner \\ ros-noetic-mpc-local-planner \\ libarmadillo-dev \\ ros-noetic-nlopt \\ ros-noetic-turtlebot3-description \\ ros-noetic-turtlebot3-navigation \\ ros-noetic-lms1xx \\ ros-noetic-velodyne-description","title":"8. Install additional packages"},{"location":"installation/#python-poetry","text":"curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - source $HOME/.poetry/env","title":"Python Poetry"},{"location":"installation/#recommendations-optional","text":"","title":"Recommendations (Optional)"},{"location":"installation/#oh-my-zsh","text":"We recommend using oh-my-zsh. You can set up oh-my-zsh with the following steps.","title":"oh-my-zsh"},{"location":"installation/#1-install-zsh","text":"sudo apt install zsh","title":"1. Install zsh"},{"location":"installation/#2-install-curl","text":"sudo apt install curl","title":"2. Install curl"},{"location":"installation/#3-install-oh-my-zsh","text":"sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"","title":"3. Install oh-my-zsh"},{"location":"installation/#4-set-up-autosuggestions","text":"git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Open your .zshrc with editor nano ~/.zshrc Scroll down to plugins Insert zsh-autosuggestions into plugins=() . Your plugins might look like this: plugins=(git zsh-autosuggestions) Save with Ctrl+S Exit with Crtl+X Source your .zshrc source $HOME/.zshrc","title":"4. Set up autosuggestions"},{"location":"installation/#5-install-powerlevel10k-theme-optional","text":"git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k In your zshrc, search for ZSH_THEME, set ZSH_THEME=\"powerlevel10k/powerlevel10k\", and follow install wizard.","title":"5. Install Powerlevel10k Theme (optional)"},{"location":"installation/#visual-studio-code","text":"We recommend using VSC as your programming environment. You can download VSC from the official site .","title":"Visual Studio Code"},{"location":"installation/#for-windows-users","text":"","title":"For Windows Users"},{"location":"installation/#wsl2-windows-subsystem-for-linux","text":"Please follow the steps in this WSL installation guide for Windows 10 to install WSL2 on your computer. Note You might encounter this problem during installation: Installing, this may take a few minutes... WslRegisterDistribution failed with error: 0x80370102 Error: 0x80370102 The virtual machine could not be started because a required feature is not installed. This problem can be resolved by enabling CPU virtualization in your BIOS. How you can achieve this depends on your hardware. This guide from bleepingcomputer might help you with that.","title":"WSL2 (Windows-Subsystem for Linux)"},{"location":"installation/#windows-x-server","text":"To use WSL with graphical programs, an X-server will need to be installed on the Windows 10 system and the DISPLAY variable will need to be set in Bash/Zsh. One possible program to use is VcXsrv .","title":"Windows-X-Server"},{"location":"installation/#1-set-up-display-variable","text":"After installing the X-server you need to set the DISPLAY variable in your bash/zsh. Use nano ~/.bashrc or nano ~/.zshrc and insert the following code on the bottom of the file. export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0 Save with Ctrl+S and exit via Ctrl+X.","title":"1. Set up DISPLAY variable"},{"location":"installation/#2-xlaunch-settings","text":"Start Xlaunch and configure it the following way. In the end the configuration can be saved.","title":"2. Xlaunch Settings"},{"location":"installation/#3-display-settings","text":"Choose Option: Multiple Windows Set Display Number to 0","title":"3. Display Settings"},{"location":"installation/#4-client-settings","text":"Choose Option: Start no Client","title":"4. Client Settings"},{"location":"installation/#5-extra-settings","text":"Choose Option: Disable access control Note If you encounter problems, you might go to Windows Defender Firewall -> Communication between Applications and Windows Firewall. Look for VcXsrv and change the settings to both private and public checked. Another problem might occur because of inbound rules from Windows Defender Firewall. Go to Windows Defender Firewall -> Advanced Settings -> Inbound -> Delete every rule for VcXsrv.","title":"5. Extra Settings"},{"location":"installation/#visual-studio-code-plus-wsl-extension","text":"We recommend you use Visual Studio Code as your programming environment. Please follow the instructions in this VS Code with WSL tutorial .","title":"Visual Studio Code plus WSL Extension"},{"location":"installation/#installation_1","text":"Note Make sure your machine fulfills all the mandatory requirements listed above.","title":"Installation"},{"location":"installation/#1-create-catkin-workspace","text":"mkdir -p catkin_ws/src # name of the workspace can be arbitrary cd catkin_ws/src","title":"1. Create catkin workspace"},{"location":"installation/#2-clone-arena-rosnav-repository","text":"git clone https://github.com/Arena-Rosnav/arena-rosnav cd arena-rosnav","title":"2. Clone arena-rosnav repository"},{"location":"installation/#3-update-the-ros-workspace","text":"rosws update","title":"3. Update the ROS workspace"},{"location":"installation/#4-install-python-packages-with-poetry","text":"poetry shell && poetry install","title":"4. Install python packages with poetry"},{"location":"installation/#5-install-stable-baselines3","text":"cd ../forks/stable-baselines3 && pip install -e .","title":"5. Install stable-baselines3"},{"location":"installation/#6-build-your-workspace","text":"cd ../../.. && catkin_make Note If packages are missing during the build process, simply add them with poetry add <package_name> . Finished! Check out the Quickstart Guides to start using arena-rosnav.","title":"6. Build your workspace"},{"location":"modules/","text":"Modules The organizations repos are divided into planners, simulation and training environments, and general utils. Planners and general utils are designed to work in all simulation and training environments. TODO: Insert System Design Chart Planners Planners are essential packages and control the robot, which is simulated in the environments. We offer the following planners: ROSNav: Our own planner based on neural networks. Dragon: TODO Trail: TODO Applr: TODO RLCA-ROS: TODO CADRL: TODO SARL-Star: TODO Crowdnav-ROS Simulation and Training environment Training and simulation environment are the core of Arena ROSNav, it combines the utils and planners. We offer following environments: arena-rosnav: 2D simulation environment for benchmarking and training. arena-rosnav-3d: 3D environment especially designed for benchmarking. General Utils General utils packages are used in the simulation environments and cover one specific task. We have the following utils repos: task-generator: Prepares the simulation environment and offers specific tasks for the robot to do. waypoint-generator: Generates the plan and subgoal for the planners. arena-tools: A collection of arena specific tools for generating own robot footprints and scenarios that can be used with the task generator. arena-simulation-setup: Contains robots, maps, and a bunch of other decleration files used in the simulations. arena-utils: A collection of different utils packages for planner, simulation and visualization.","title":"Modules"},{"location":"modules/#modules","text":"The organizations repos are divided into planners, simulation and training environments, and general utils. Planners and general utils are designed to work in all simulation and training environments. TODO: Insert System Design Chart","title":"Modules"},{"location":"modules/#planners","text":"Planners are essential packages and control the robot, which is simulated in the environments. We offer the following planners: ROSNav: Our own planner based on neural networks. Dragon: TODO Trail: TODO Applr: TODO RLCA-ROS: TODO CADRL: TODO SARL-Star: TODO Crowdnav-ROS","title":"Planners"},{"location":"modules/#simulation-and-training-environment","text":"Training and simulation environment are the core of Arena ROSNav, it combines the utils and planners. We offer following environments: arena-rosnav: 2D simulation environment for benchmarking and training. arena-rosnav-3d: 3D environment especially designed for benchmarking.","title":"Simulation and Training environment"},{"location":"modules/#general-utils","text":"General utils packages are used in the simulation environments and cover one specific task. We have the following utils repos: task-generator: Prepares the simulation environment and offers specific tasks for the robot to do. waypoint-generator: Generates the plan and subgoal for the planners. arena-tools: A collection of arena specific tools for generating own robot footprints and scenarios that can be used with the task generator. arena-simulation-setup: Contains robots, maps, and a bunch of other decleration files used in the simulations. arena-utils: A collection of different utils packages for planner, simulation and visualization.","title":"General Utils"}]}